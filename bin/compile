#!/bin/bash

# fail fast
set -o errexit
set -o nounset
set -o pipefail

indent() {
  sed -u 's/^/       /'
}

scriptname=$(basename $0)
case $# in
  2) :;;
  *) echo "$scriptname: usage: $scriptname BUILD_DIR CACHE_DIR" >&2; exit 2;;
esac

build_dir="$1"
cache_dir="$2"
ccache_max_size=50G
num_cpu=$(grep -c ^bogomips /proc/cpuinfo)
rpmbuild=$build_dir/.rpmbuild
rpmspec=$build_dir/.heroku/vendor/bin/rpmspec
source_type=internal
fedora_pkg_url=http://pkgs.fedoraproject.org/repo/pkgs

export CCACHE_DIR=$cache_dir/ccache
export PATH=/usr/local/lib/ccache:"$PATH"

echo "-----> Zeroing ccache stats"
ccache -M $ccache_max_size 2>&1 | indent
ccache -z 2>&1 | indent

echo "-----> Creating RPM build tree"
mkdir -p $rpmbuild/{BUILD,BUILDROOT,RPMS,SRPMS}
mkdir -p $cache_dir/rpmbuild/SOURCES

if [ -d $build_dir/SOURCES ]
then
  sourcedir=$build_dir/SOURCES
else
  sourcedir=$build_dir
fi

echo "-----> Creating .rpmmacros (for rpmspec)"
if [ -f /etc/redhat-release ]
then
  case $(awk '{print $3}' < /etc/redhat-release) in
    5.*)
      cp $(dirname $0)/../vendor/redhat-rpm-config-8.0.45/usr/lib/rpm/redhat/macros ~/.rpmmacros
      cat <<EOT >>$HOME/.rpmmacros
%centos_version 505
%dist .el5
%rhel 5
EOT
      ;;
    6.*)
      cp $(dirname $0)/../vendor/redhat-rpm-config-9.0.3/usr/lib/rpm/redhat/macros ~/.rpmmacros
      cat <<EOT >>$HOME/.rpmmacros
%centos_version 600
EOT
      ;;
  esac
fi

if ls $build_dir/*.spec >/dev/null 2>&1
then
  specfile=$(ls $build_dir/*.spec)
  echo "       Using specfile: $(basename $specfile)"
elif ls $build_dir/SPECS/*.spec >/dev/null 2>&1
then
  specfile=$(ls $build_dir/SPECS/*.spec)
else
  echo "       Error: Cannot find specfile"
  exit 1
fi

spec_package=$(awk -F: '$1 == "Name" {print $2}' $specfile | sed 's/^[[:space:]]*//; s/;[[:space:]]*/;/g')
spec_version=$(awk -F: '$1 == "Version" {print $2}' $specfile | sed 's/^[[:space:]]*//; s/;[[:space:]]*/;/g')

if ls $build_dir/*.spec.in >/dev/null 2>&1
then
  cd $build_dir >/dev/null 2>&1
  num_sources=$($rpmspec -qP $build_dir/*.spec | egrep '^Source0:' | awk '{print $2}' | wc -l)
  case $num_sources in
    1) :;;
    *) echo "       error: Found $num_sources source URLs, should be 1"; exit 1;;
  esac
  source_url=$($rpmspec -qP $build_dir/*.spec | egrep '^Source0:' | awk '{print $2}')
  source_file=$(basename $source_url)
  case $source_file in
    *.tar.bz2|*.tar.gz) :;;
    *) echo "       error: Don't know how to create archive $source_file"; exit 1;;
  esac
  echo "-----> Creating source archive"
  ./autogen.sh 2>&1 | indent
  ./configure 2>&1 | indent
  make dist-bzip2 2>&1 | indent
  make dist 2>&1 | indent
  cd - >/dev/null 2>&1
elif [ -f $build_dir/setup.py ]
then
  echo "-----> Creating source archive"
  cd $build_dir >/dev/null 2>&1
  if [ -f /usr/bin/python26 ]
  then
    python=python26
  else
    python=python
  fi
  $python setup.py sdist --formats=bztar,gztar 2>&1 | indent
  mv dist/*.tar.bz2 .
  mv dist/*.tar.gz .
  cd - >/dev/null 2>&1
else
  echo "-----> Downloading sources and patches"
  source_list=$($rpmspec -qP $build_dir/*.spec | awk '$1 ~ /^(Source|Patch).*:/ {print $2}')
  fixed_source_list=
  for url in $source_list
  do
    case "$url" in
      *://*)
        fixed_source_list="$fixed_source_list $url"
        source_type=external
        ;;
      *)
        if [ -f $sourcedir/sources -a ! -f $sourcedir/$url ]
        then
          md5=$(awk '$2 == "'"$url"'" {print $1}' $sourcedir/sources)
          fixed_source_list="$fixed_source_list $fedora_pkg_url/$spec_package/$url/$md5/$url"
          source_type=external
        else
          fixed_source_list="$fixed_source_list $url"
        fi
        ;;
    esac    
  done
  cd $build_dir >/dev/null 2>&1
  for url in $fixed_source_list
  do
    file=$(basename $url)
    if [ -f $sourcedir/$file ]
    then
      continue
    fi
    case "$url" in
      *://*)
        if [ -f $cache_dir/rpmbuild/SOURCES/$file ]
        then
          echo "       Copying from cache: $file"
          cp -f $cache_dir/rpmbuild/SOURCES/$file $sourcedir/$file
        else
          echo "       Downloading: $url"
          curl -fsSL $url >$sourcedir/$file 2>&1 | indent
          cp -f $sourcedir/$file $cache_dir/rpmbuild/SOURCES/$file.new
          mv $cache_dir/rpmbuild/SOURCES/$file.new $cache_dir/rpmbuild/SOURCES/$file
        fi
        ;;
      $spec_package.tar.bz2)
        echo "-----> Creating source archive: $file"
        tar -C $build_dir -cjf /tmp/$file .
        mv /tmp/$file $sourcedir/$file
        ;;
      $spec_package.tar.gz)
        echo "-----> Creating source archive: $file"
        tar -C $build_dir -czf /tmp/$file .
        mv /tmp/$file $sourcedir/$file
        ;;
      $spec_package-$spec_version.tar.bz2)
        echo "-----> Creating source archive: $file"
        mkdir -p /tmp/app/$spec_package-$spec_version
        tar -C $build_dir -cf - . | tar -C /tmp/app/$spec_package-$spec_version -xf -
        tar -C /tmp/app -cjf /tmp/$file .
        mv /tmp/$file $sourcedir/$file
        rm -rf /tmp/app
        ;;
      $spec_package-$spec_version.tar.gz)
        echo "-----> Creating source archive: $file"
        mkdir -p /tmp/app/$spec_package-$spec_version
        tar -C $build_dir -cf - . | tar -C /tmp/app/$spec_package-$spec_version -xf -
        tar -C /tmp/app -czf /tmp/$file .
        mv /tmp/$file $sourcedir/$file
        rm -rf /tmp/app
        ;;
      *)
        echo "       Unrecognized source file: $url"
        ;;
    esac
  done
  if [ -f $sourcedir/sources ]
  then
    echo "-----> Verifying MD5 checksums"
    md5sum -c sources 2>&1 | indent
  fi
  cd - >/dev/null 2>&1
fi

case "$source_type" in
  internal)
    echo "-----> Inline sources detected, updating version using git metadata"
    cd $build_dir >/dev/null 2>&1
    spec_version=$($rpmspec -q --queryformat='%{version}\n' $specfile | sort -u)
    tag=$(git tag | egrep '^(\w*[^0-9])?'"$spec_version"'(-[0-9]*)?$' || : | head -n 1)
    case "$tag" in
      '') tagged_commit=;;
      *) tagged_commit=$(git rev-list -n 1 "$tag");;
    esac
    commit=$(git log -n 1 | awk '$1 == "commit" {print $2}')
    case "$tagged_commit" in
      "$commit")
        echo "       Found version: $spec_version (release)"
        if grep -q '^Release:.*%{?dist}$' $specfile
        then
          echo "       Not modifying spec file"
        else
          echo "       Adding %{?dist} tag to spec file"
          sed -i "s/^\(Release:.*\)$/\1%{?dist}/" $specfile
        fi
        ;;
      '')
        echo "       Found version: $spec_version (pre-release)"
        timestamp=$(date +%Y%m%d%H%M%S)
        rel=0.$timestamp.dev.g$(echo $commit | sed 's/^\(.\{7\}\).*/\1/')
        echo "       Updating spec file with Release: $rel"
        sed -i "s/^\(Release:[^0-9]*\).*$/\1$rel%{?dist}/" $specfile
        ;;
      *)
        echo "       Found version: $spec_version (post-release)"
        timestamp=$(date +%Y%m%d%H%M%S)
        rel=1.$timestamp.dev.g$(echo $commit | sed 's/^\(.\{7\}\).*/\1/')
        echo "       Updating spec file with Release: $rel"
        sed -i "s/^\(Release:[^0-9]*\).*$/\1$rel%{?dist}/" $specfile
        ;;
    esac
    cd - >/dev/null 2>&1
    ;;
  *)
    echo "-----> External sources detected, leaving spec file version unchanged"
    ;;
esac

echo "-----> Creating .rpmmacros (for rpmbuild)"
if [ -f /etc/redhat-release ]
then
  case $(awk '{print $3}' < /etc/redhat-release) in
    5.*)
      cat <<EOT >$HOME/.rpmmacros
%centos_version 505
%dist .el5
%rhel 5
EOT
      ;;
    6.*)
      cat <<EOT >$HOME/.rpmmacros
%centos_version 600
EOT
      ;;
  esac
fi
cat <<EOT >>$HOME/.rpmmacros
%_topdir $rpmbuild
%_sourcedir $sourcedir
EOT

# XXX: Make _unpackaged_files_terminate_build configurable?
# --define "_unpackaged_files_terminate_build 0"
echo "-----> Building RPM package"
cd $build_dir >/dev/null 2>&1
rpmbuild -bb --define "_topdir $rpmbuild" --define "_sourcedir $sourcedir" \
  $specfile 2>&1 | indent
cd - >/dev/null 2>&1
